/*
   This file was generated automatically by the Mojo IDE version B1.3.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_1 (
    input [7:0] a,
    input [7:0] b,
    input [5:0] alufn,
    output reg [7:0] out
  );
  
  
  
  wire [8-1:0] M_adder_out;
  wire [1-1:0] M_adder_zout;
  wire [1-1:0] M_adder_vout;
  wire [1-1:0] M_adder_nout;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  reg [6-1:0] M_adder_alufn;
  adder_3 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn(M_adder_alufn),
    .out(M_adder_out),
    .zout(M_adder_zout),
    .vout(M_adder_vout),
    .nout(M_adder_nout)
  );
  
  wire [8-1:0] M_boolean_out;
  reg [8-1:0] M_boolean_a;
  reg [8-1:0] M_boolean_b;
  reg [6-1:0] M_boolean_alufn;
  boolean_4 boolean (
    .a(M_boolean_a),
    .b(M_boolean_b),
    .alufn(M_boolean_alufn),
    .out(M_boolean_out)
  );
  
  wire [8-1:0] M_shifter_out;
  reg [8-1:0] M_shifter_a;
  reg [8-1:0] M_shifter_b;
  reg [8-1:0] M_shifter_alufn;
  shifter_5 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufn(M_shifter_alufn),
    .out(M_shifter_out)
  );
  
  wire [8-1:0] M_compare_out;
  reg [6-1:0] M_compare_alufn;
  reg [1-1:0] M_compare_zin;
  reg [1-1:0] M_compare_vin;
  reg [1-1:0] M_compare_nin;
  compare_6 compare (
    .alufn(M_compare_alufn),
    .zin(M_compare_zin),
    .vin(M_compare_vin),
    .nin(M_compare_nin),
    .out(M_compare_out)
  );
  
  wire [8-1:0] M_multiplier_out;
  reg [8-1:0] M_multiplier_a;
  reg [8-1:0] M_multiplier_b;
  reg [8-1:0] M_multiplier_alufn;
  multiplier_7 multiplier (
    .a(M_multiplier_a),
    .b(M_multiplier_b),
    .alufn(M_multiplier_alufn),
    .out(M_multiplier_out)
  );
  
  wire [8-1:0] M_division_out;
  reg [8-1:0] M_division_a;
  reg [8-1:0] M_division_b;
  division_8 division (
    .a(M_division_a),
    .b(M_division_b),
    .out(M_division_out)
  );
  
  reg [7:0] preout;
  
  always @* begin
    M_adder_a = a;
    M_adder_b = b;
    M_adder_alufn = alufn;
    M_boolean_a = a;
    M_boolean_b = b;
    M_boolean_alufn = alufn;
    M_shifter_a = a;
    M_shifter_b = b;
    M_shifter_alufn = alufn;
    M_compare_zin = M_adder_zout;
    M_compare_vin = M_adder_vout;
    M_compare_nin = M_adder_nout;
    M_compare_alufn = alufn;
    M_multiplier_a = a;
    M_multiplier_b = b;
    M_multiplier_alufn = alufn;
    M_division_a = a;
    M_division_b = b;
    
    case (alufn[4+1-:2])
      2'h0: begin
        if (alufn[2+0-:1] == 1'h0) begin
          preout = M_adder_out;
        end else begin
          if (alufn[2+0-:1] == 1'h1) begin
            if (alufn[0+0-:1] == 1'h0) begin
              preout = M_multiplier_out;
            end else begin
              if (alufn[0+0-:1] == 1'h1) begin
                preout = M_division_out;
              end else begin
                preout = 8'bxxxxxxxx;
              end
            end
          end else begin
            preout = 8'bxxxxxxxx;
          end
        end
      end
      2'h1: begin
        preout = M_boolean_out;
      end
      2'h2: begin
        preout = M_shifter_out;
      end
      2'h3: begin
        preout = M_compare_out;
      end
      default: begin
        preout = 8'h55;
      end
    endcase
    out = preout;
  end
endmodule
